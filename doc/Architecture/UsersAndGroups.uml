@startuml

package existingCode {
  class Role
  class DvObject
  class RoleAssignment
  class Dataverse 

  note as n1
    A role can be assigned
    at the DvObject where it 
    is defined, or at any of
    that DvObject's descendants
  end note
}

package assignees {
  note as n2
   Invariant: We <b>always</b> have a user
   Local users are just users supplied by a local provider
  end note

  interface Assignee {
    + displayString()
    + showInLists: Boolean
  }

  interface User {
    + identifier:String
  }

  class SingleUser {
  }

  class IpUser {
  }

  class AggregateUser {
  }

  class DatabaseUser {
    + id:Long
    + name:String
  }

  class UserRecord {
    identifier: String
    displayInfo: DisplayInfo
  }

  class ShibUser {
  }

  class OauthUser {
  }

  class LdapUser {
  }

  class GuestUser {
    showInLists: False
  }

  class ApiKey {
    + key:String
    + title: String
  }

  interface Group {
    + contains( a:Assignee )
  }

  class ExplicitGroup {
    + add( a:Assignee )
    + remove( a:Assignee )
    + list: Assignee[]
  }

  class RegisteredUsers {
    
  }

  class GuestUsers {
    
  }

  Interface ExternalGroup {
    
  }
  note bottom
    Maps a set of
    external credentials
    to an internal 
    Asignee object
  end note

  class IpGroup {
    
  }
}
Assignee <|-- User
Assignee <|-- Group
User <|-- SingleUser
User <|-- AggregateUser
AggregateUser <|-- GuestUser
AggregateUser <|-- IpUser
SingleUser <|-- DatabaseUser
SingleUser <|-- ShibUser
SingleUser <|-- OauthUser
SingleUser <|-- LdapUser
Group <|-- ExplicitGroup
Group <|-- ExternalGroup
Group <|-- RegisteredUsers
Group <|-- GuestUsers
ExternalGroup <|-- IpGroup

UserRecord ..> User : "Locates"

User "1" *- "0..*" ApiKey

Role -> DvObject: Defined at
RoleAssignment -up-> "1" DvObject: At
RoleAssignment -up-> "1" Role: Assigns
RoleAssignment --> "1" Assignee: To

Group ..> Assignee: <<Contains>>
ExplicitGroup o--> Assignee
ExplicitGroup --> Dataverse: Defined At

DvObject <|-- Dataverse

package userprovider {
  
  class UserProviderManager {
    providers[]
    registerProvider( p:UserProvider )
    listProviders: Collection<UserProvider>
    getUser( idtf:String ) : User
    getUser( req:HttpRequest ) : User
  }

  interface UserProvider {
    + info : UserProviderInfo
    acceptsUserIdentifier( idtf:String ): bool
    getUser( idtf:String ) : User
    getUser( req:HttpRequest ) : User
  }

  UserProviderManager *-- "*" UserProvider
}

package somewhereElseInDataverse {
  class AccessRequest {
    from: UserRecord
    to: UserRecord
    dvo: DvObject
    metadata : Object
  }

}
 
AccessRequest ..> UserRecord : "From, To"
AccessRequest ..> DvObject : "about"

UserProvider ..> Group : "Creates"
note on link
  We may also add a group provider,
  but generating users and querying
  their status seems highly cohesive
end note

@enduml
