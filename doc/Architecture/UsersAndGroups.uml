@startuml

package existingCode {
  class Role
  class DvObject
  class RoleAssignment
  class Dataverse 

  note as n1
    A role can be assigned
    at the DvObject where it 
    is defined, or at any of
    that DvObject's descendants
  end note
}

package assignees {
  class Assignee {
    + displayString()
    + showInLists: Boolean
  }

  class User {
    + locator:String
  }

  class SingleUser {
  }

  class IpUser {
  }

  class AggregateUser {
  }
  note bottom
   Maintains invariant:
   we <b>always</b> have a user
  end note

  class DatabaseUser {
    + id:Long
    + name:String
  }

  class ShibUser {
  }

  class OauthUser {
  }

  class LdapUser {
  }

  class GuestUser {
    showInLists: False
  }

  class ApiKey {
    + key:String
    + title: String
  }

  class Group {
    + contains( a:Assignee )
  }

  class ExplicitGroup {
    + add( a:Assignee )
    + remove( a:Assignee )
    + list: Assignee[]
  }

  class RegisteredUsers {
    
  }

  class GuestUsers {
    
  }

  class ExternalGroup {
    
  }
  note bottom
    Maps a set of
    external credentials
    to an internal 
    Asignee object
  end note

  class IpGroup {
    
  }
}
Assignee <|-- User
Assignee <|-- Group
User <|-- SingleUser
User <|-- AggregateUser
AggregateUser <|-- GuestUser
AggregateUser <|-- IpUser
SingleUser <|-- DatabaseUser
SingleUser <|-- ShibUser
SingleUser <|-- OauthUser
SingleUser <|-- LdapUser
Group <|-- ExplicitGroup
Group <|-- ExternalGroup
Group <|-- RegisteredUsers
Group <|-- GuestUsers
ExternalGroup <|-- IpGroup

User "1" *- "0..*" ApiKey

Role -> DvObject: Defined at
RoleAssignment -up-> "1" DvObject: At
RoleAssignment -up-> "1" Role: Assigns
RoleAssignment --> "1" Assignee: To

Group ..> Assignee: <<Contains>>
ExplicitGroup o--> Assignee
ExplicitGroup --> Dataverse: Defined At

DvObject <|-- Dataverse

@enduml
