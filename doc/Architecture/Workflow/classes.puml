@startuml

class DvObject<OK> <<entity>>
class DvObjectContainer<OK> <<entity>>
class Dataverse<OK> <<entity>>
class Dataset <<entity>>

Dataset --|> DvObjectContainer
DvObjectContainer --|>DvObject
Dataverse -up-|> DvObjectContainer
DvObject o--> DvObjectContainer: parent

class Workflow<OK> <<entity>> {
  id
  name
  description
}

class WorkflowStepData<OK> <<entity>> {
  providerId: String
  stepId: String
  parameters: Map<String,String>
}

class WorkflowBean<In Progress> <<bean>> {
  getWorkflows()
  getWorkflow(id)
  deleteWorkflow(id)
  saveWorkflow(w)
  resumeWorkflow(pwf)
  ... not implemented ...
  getStepProvider(id)
}

class WorkflowContext<OK> {
  r:DataverseRequest
  d:Dataset
  invocationId:UUID
  versionData
  isMinorRelease()
}

class PendingWorkflow<OK> <<entity>> {
  externalId: UUID
  workflow: Workflow
  pendingStep: WorkflowStepData
  localData: DATA
  request: DataverseRequest
  dataset: Dataset
}

interface WorkflowStepSPI<OK> {
  id
  getStep(stepId, parameters):Step
}

interface WorkflowStep<OK> {
  run( WorkflowContext ): WorkflowStepResult
  resume( WorkflowContext ): WorkflowStepResult
  rollback( WorkflowContext  )
}

class WorkflowStepResult<OK> <<abstract>>
class OK<OK> <<singleton>>
class Pending<OK>{
  localData
}
class Failure<OK> {
  reason:Throwable
}

package engine.command {
  class PublishDatasetCommand
  class ResumeWorkflowCommand
}

package api {
  class WorkflowStepResponse <<endpoint>> {
    POST /step/${externalId}
  }

  class WorkflowManagementEndpoint<In Progress> <<endpoint>> {
    POST add
    GET list
    DELETE id
    GET pendingWorkflows
  }
}

OK -up-|> WorkflowStepResult
Pending -up-|> WorkflowStepResult
Failure -up-|> WorkflowStepResult

PendingWorkflow o--> Workflow
PendingWorkflow o--> WorkflowStepData
PendingWorkflow o--> Dataset
Workflow "1" *--> "1..*" WorkflowStepData: <<ordered>>
WorkflowStepSPI ..> WorkflowStep: creates
WorkflowStep ..> WorkflowStepResult: creates
WorkflowStepResponse ..> PendingWorkflow : invokes
WorkflowBean *--> WorkflowStepSPI
WorkflowBean *--> Workflow

PublishDatasetCommand ..> Workflow : uses
PublishDatasetCommand ..> Dataset : uses
PublishDatasetCommand ..> WorkflowBean : uses

ResumeWorkflowCommand ..> Workflow : uses
ResumeWorkflowCommand ..> Dataset : uses
ResumeWorkflowCommand ..> WorkflowBean : uses

PendingWorkflow  ..> WorkflowContext: <<contains>>

@enduml
