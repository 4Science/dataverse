<ui:composition
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:p="http://primefaces.org/ui"
    xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
    xmlns:jsf="http://xmlns.jcp.org/jsf"
    xmlns:pt="http://java.sun.com/jsf/passthrough"
    xmlns:cc="http://java.sun.com/jsf/composite"
    xmlns:o="http://omnifaces.org/ui"
    xmlns:iqbs="http://xmlns.jcp.org/jsf/composite/iqbs">
    <div class="button-block">
        <!-- Ingest Problem - this is the infamous "red triangle" error. As of 4.2, we only want to show it to the owner of the dataset: -->
        <ui:fragment rendered="#{fileMetadata.dataFile.ingestProblem 
                                 and canUpdateDataset}">
            <span class="ingest-warning" data-toggle="popover" data-container="body" data-trigger="hover" data-placement="left" data-html="true" data-title="&lt;span class='text-danger h5'&gt;#{bundle['file.ingestFailed']}&lt;/span&gt;" data-content="&lt;span class='text-danger'&gt;#{fileMetadata.dataFile.ingestReportMessage}&lt;/span&gt;">
                <span class="glyphicon glyphicon-warning-sign text-danger"/>
            </span>
        </ui:fragment>
        <!-- Explore Dropdown: When TwoRavens **AND** WorldMap Explore options are available -->
        <div class="btn-group" jsf:rendered="#{twoRavensHelper.canSeeTwoRavensExploreButtonFromPage(fileMetadata) and worldMapPermissionHelper.canUserSeeExploreWorldMapButtonFromPage(fileMetadata)}">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <span class="glyphicon glyphicon-equalizer"/> #{bundle.explore} <span class="caret"/>
            </button>
            <ul class="dropdown-menu multi-level pull-right text-left" role="menu">
                <li><!-- Two Ravens -->
                    <h:commandLink rendered="#{!downloadPopupRequired}"
                                   styleClass="#{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}"
                                   disabled="#{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}"
                                   actionListener="#{fileDownloadService.startExploreDownloadLink(twoRavensHelper, guestbookResponse, fileMetadata )}" target="_blank">
                        TwoRavens
                    </h:commandLink>
                    <p:commandLink rendered="#{downloadPopupRequired}"                                            
                                   action="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse, fileMetadata, 'explore' )}"
                                   update="@form"
                                   oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                        TwoRavens
                    </p:commandLink>                          
                </li>
                <li><!-- WorldMap Explore -->
                    <h:outputLink rendered="#{worldMapPermissionHelper.canUserSeeExploreWorldMapButtonFromPage(fileMetadata)}"
                                  styleClass="#{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}"  
                                  value="#{ worldMapPermissionHelper.getMapLayerMetadata(fileMetadata.dataFile).getLayerLink() }" target="_blank">
                        #{bundle['file.mapData.viewMap']}
                    </h:outputLink>
                </li>                       
            </ul>
        </div>

        <!-- TwoRavens Explore button ONLY ... not WorldMap -->
        <ui:fragment rendered="#{ twoRavensHelper.canSeeTwoRavensExploreButtonFromPage(fileMetadata) and !worldMapPermissionHelper.canUserSeeExploreWorldMapButtonFromPage(fileMetadata)}">
            <h:commandLink rendered="#{!downloadPopupRequired}"
                           type="button" styleClass="btn btn-default #{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}"
                           disabled="#{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}"
                           actionListener="#{fileDownloadService.startExploreDownloadLink(twoRavensHelper, guestbookResponse, fileMetadata )}" target="_blank">
                <span class="glyphicon glyphicon-equalizer"/> <span class="ladda-label">#{bundle.explore}</span>
            </h:commandLink>
            <p:commandLink rendered="#{downloadPopupRequired}"
                           type="button" styleClass="btn btn-default"
                           action="#{DatasetPage.initGuestbookResponse(fileMetadata, 'explore')}"
                           update="@form"
                           oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                <span class="glyphicon glyphicon-equalizer"/> #{bundle.explore}
            </p:commandLink>
        </ui:fragment>

        <!-- WorldMap Explore button ONLY ... not TwoRavens -->
        <ui:fragment rendered="#{worldMapPermissionHelper.canUserSeeExploreWorldMapButtonFromPage(fileMetadata) and !(twoRavensHelper.canSeeTwoRavensExploreButtonFromPage(fileMetadata))}">
            <h:outputLink pt:role="button" rendered="#{worldMapPermissionHelper.canUserSeeExploreWorldMapButtonFromPage(fileMetadata)}"
                          type="button" styleClass="btn btn-default #{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}" disabled="#{fileMetadata.dataFile.ingestInProgress ? 'disabled' : ''}" 
                          title="Explore" value="#{ worldMapPermissionHelper.getMapLayerMetadata(fileMetadata.dataFile).getLayerLink() }" target="_blank">
                <span class="glyphicon glyphicon-equalizer"/> #{bundle.explore}
            </h:outputLink>
        </ui:fragment>

        <!-- WorldMap Map Data button group -->
        <!-- 4.2.1: VERIFIED: none of these checks add any queries, if there are no map layers. -->
        <div class="btn-group" role="group" jsf:rendered="#{worldMapPermissionHelper.canUserSeeMapDataButtonFromPage(fileMetadata) or worldMapPermissionHelper.canSeeMapButtonReminderToPublishFromPage(fileMetadata)}">
            <!-- WorldMap Map Data -->
            <h:outputLink pt:role="button" rendered="#{worldMapPermissionHelper.canUserSeeMapDataButtonFromPage(fileMetadata)}"
                          type="button" styleClass="btn btn-default" value="#{fileMetadata.dataFile.getMapItURL(dataverseSession.user.id)}" role="button">
                <span class="glyphicon glyphicon-map-marker"/> #{bundle['file.mapData']}
            </h:outputLink>
            <!-- Unpublished Map Data -->
            <ui:fragment rendered="#{worldMapPermissionHelper.canSeeMapButtonReminderToPublish(fileMetadata)}">
                <button type="button" class="btn btn-default" onclick="PF('mapData_popup').show()">
                    <span class="glyphicon glyphicon-map-marker"/> #{bundle['file.mapData']}
                </button>
            </ui:fragment>
        </div>

        <!-- non-tabular data file: -->
        <!-- no guest book/terms of use/etc. - straight to the download API url: -->
        <p:commandLink rendered="#{ fileDownloadHelper.canDownloadFile(fileMetadata) and !(fileMetadata.dataFile.tabularData) and !(downloadPopupRequired) }"
                       type="button" styleClass="btn btn-default"
                       actionListener="#{fileDownloadService.startFileDownload(fileMetadata, 'Download')}">
            <span class="glyphicon glyphicon-download-alt"/> #{bundle.download}
        </p:commandLink>
        <!-- guest book or terms of use, etc. enabled - open "download popup" first: -->
        <p:commandLink rendered="#{ fileDownloadHelper.canDownloadFile(fileMetadata) and !(fileMetadata.dataFile.tabularData) and downloadPopupRequired }"
                       type="button" styleClass="btn btn-default"
                       action="#{guestbookResponseService.modifyDatafile(guestbookResponse, fileMetadata)}"
                       update="@form" oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
            <span class="glyphicon glyphicon-download-alt"/> #{bundle.download}
        </p:commandLink>
        <div class="btn-group" jsf:rendered="#{ fileDownloadHelper.canDownloadFile(fileMetadata) and fileMetadata.dataFile.tabularData }">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <span class="glyphicon glyphicon-download-alt"/> #{bundle.download} <span class="caret"/>
            </button>
            <ul class="dropdown-menu multi-level pull-right text-left" role="menu">
                <ui:remove>
                    <li>
                        <p:commandLink styleClass="highlightBold" rendered="#{!(downloadPopupRequired)}"
                                       actionListener="#{fileDownloadService.startFileDownload(fileMetadata, 'bundle')}">
                            #{bundle['file.downloadBtn.format.all']}
                        </p:commandLink>
                        <p:commandLink styleClass="highlightBold" rendered="#{downloadPopupRequired}"
                                       action="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse, fileMetadata, 'bundle' )}"
                                       update="@form"
                                       oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                            #{bundle['file.downloadBtn.format.all']}
                        </p:commandLink>
                    </li>
                    <li role="presentation" class="divider"></li>
                </ui:remove>
                <li>
                    <p:commandLink rendered="#{!downloadPopupRequired}"
                                   actionListener="#{fileDownloadService.startFileDownload(fileMetadata, 'original')}">
                        <h:outputFormat value="#{bundle['file.downloadBtn.format.original']}">
                            <f:param value="#{fileMetadata.dataFile.originalFormatLabel}"/>
                        </h:outputFormat>
                    </p:commandLink>
                    <p:commandLink rendered="#{downloadPopupRequired}"
                                   action="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse, fileMetadata, 'original' )}"
                                   update="@form"
                                   oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                        <h:outputFormat value="#{bundle['file.downloadBtn.format.original']}">
                            <f:param value="#{fileMetadata.dataFile.originalFormatLabel}"/>
                        </h:outputFormat>
                    </p:commandLink>
                </li>
                <li>
                    <p:commandLink rendered="#{!downloadPopupRequired}"
                                   actionListener="#{fileDownloadService.startFileDownload(fileMetadata, 'tab')}">
                        #{bundle['file.downloadBtn.format.tab']}
                    </p:commandLink>
                    <p:commandLink rendered="#{downloadPopupRequired}"
                                   action="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse, fileMetadata, 'tab' )}"
                                   update="@form"
                                   oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                        #{bundle['file.downloadBtn.format.tab']}
                    </p:commandLink>
                </li>
                <ui:fragment rendered="#{!(fileMetadata.dataFile.originalFormatLabel == 'RData')}">
                    <li>
                        <p:commandLink rendered="#{!downloadPopupRequired}"
                                       actionListener="#{fileDownloadService.startFileDownload(fileMetadata, 'RData')}">
                            #{bundle['file.downloadBtn.format.rdata']}
                        </p:commandLink>
                        <p:commandLink rendered="#{downloadPopupRequired}"
                                       action="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse, fileMetadata, 'RData' )}"
                                       update="@form"
                                       oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                            #{bundle['file.downloadBtn.format.rdata']}
                        </p:commandLink>
                    </li>
                </ui:fragment>
                <li>
                    <p:commandLink rendered="#{!downloadPopupRequired}"
                                   actionListener="#{fileDownloadService.startFileDownload(fileMetadata, 'var')}">
                        #{bundle['file.downloadBtn.format.var']}
                    </p:commandLink>
                    <p:commandLink rendered="#{downloadPopupRequired}"
                                   action="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse, fileMetadata, 'var' )}"
                                   update="@form"
                                   oncomplete="PF('downloadPopup').show();handleResizeDialog('downloadPopup');">
                        #{bundle['file.downloadBtn.format.var']}
                    </p:commandLink>
                </li>
                <li>
                    <p:commandLink id="fileDowloadDataSubsetButton" rendered="#{!(downloadPopupRequired)}"
                                   actionListener="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse,fileMetadata, 'subset')}"
                                   update="@form"
                                   oncomplete="PF('downloadDataSubsetPopup').show()"
                                   value="Data Subset"
                                   disabled="#{empty fileMetadata.dataFile.id}"/>
                    <p:commandLink id="fileDowloadDataSubsetButtonPopupReq" rendered="#{downloadPopupRequired}"
                                   actionListener="#{guestbookResponseService.modifyDatafileAndFormat(guestbookResponse,fileMetadata, 'subset')}"
                                   update="@form"
                                   oncomplete="PF('downloadPopup').show()"
                                   value="Data Subset"
                                   disabled="#{empty fileMetadata.dataFile.id}"/>
                </li>
                <li class="dropdown-submenu pull-left">
                    <a tabindex="-1" href="javascript:void(0);">#{bundle['file.downloadBtn.format.citation']}</a>
                    <ul class="dropdown-menu">
                        <li>
                            <h:commandLink id="risLinkFile" actionListener="#{fileDownloadService.downloadDatafileCitationRIS(fileMetadata)}">
                                <h:outputText value="#{bundle['dataset.cite.downloadBtn.ris']}" />
                            </h:commandLink>
                        </li>
                        <li>
                            <h:commandLink id="endNoteLinkFile" action="#{fileDownloadService.downloadDatafileCitationXML(fileMetadata)}">
                                <h:outputText value="#{bundle['dataset.cite.downloadBtn.xml']}" />
                            </h:commandLink>
                        </li>
                        <li>
                            <h:commandLink id="bibLinkFile" action="#{fileDownloadService.downloadDatafileCitationBibtex(fileMetadata)}">
                                <h:outputText value="#{bundle['dataset.cite.downloadBtn.bib']}" />
                            </h:commandLink>
                        </li>

                    </ul>
                </li>
            </ul>
        </div>
        <!-- Request Access -->
        <!-- 4.2.1 - TODO: retest this on a dataset with fileRequest enabled and with some files restricted to the user -->
        <!-- 4.2.1 - TODO: make sure dataFile.fileAccessRequesters gets populated -->
        <p:commandLink type="button" styleClass="btn btn-default" rendered="#{fileDownloadHelper.session.user.authenticated and fileMetadata.dataFile.owner.fileAccessRequest and !(fileDownloadHelper.canDownloadFile(fileMetadata))}"
                       actionListener="#{fileDownloadService.requestAccess(fileMetadata.dataFile, true)}"
                       update="@form"
                       disabled="#{fileMetadata.dataFile.fileAccessRequesters.contains(dataverseSession.user)}">
            <span class="glyphicon glyphicon-bullhorn"/> #{fileMetadata.dataFile.fileAccessRequesters.contains(dataverseSession.user) ? bundle['file.accessRequested'] : bundle['file.requestAccess']}
        </p:commandLink>
        <!-- 4.2.1 - TODO: retest this on a dataset with fileRequest enabled and with some files restricted to the user -->
        <p:commandLink type="button" styleClass="btn btn-default" rendered="#{!fileDownloadHelper.session.user.authenticated and fileMetadata.dataFile.owner.fileAccessRequest and !(fileDownloadHelper.canDownloadFile(fileMetadata))}"
                       onclick="PF('accessSignUpLogIn_popup').show()">
            <span class="glyphicon glyphicon-bullhorn"/> #{fileMetadata.dataFile.fileAccessRequesters.contains(dataverseSession.user) ? bundle['file.accessRequested'] : bundle['file.requestAccess']}
        </p:commandLink>


    </div>
</ui:composition>
